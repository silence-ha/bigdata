第 1 章 MapReduce 概述
1.1 MapReduce 进程
一个完整的 MapReduce 程序在分布式运行时有三类实例进程：
（1）MrAppMaster：负责整个程序的过程调度及状态协调。
（2）MapTask：负责 Map 阶段的整个数据处理流程。
（3）ReduceTask：负责 Reduce 阶段的整个数据处理流程。

1.2 常用数据序列化类型
Java 类型     Hadoop Writable 类型
Boolean       BooleanWritable
Byte          ByteWritable
Int           IntWritable
Float         FloatWritable
Long          LongWritable
Double        DoubleWritable
String        Text
Map           MapWritable
Array         ArrayWritable
Null          NullWritable

1.3 WordCount 案例实操

（1）在 pom.xml 文件中添加如下依赖
<dependencies>
 <dependency>
 <groupId>org.apache.hadoop</groupId>
 <artifactId>hadoop-client</artifactId>
 <version>3.1.3</version>
 </dependency>
 <dependency>
 <groupId>junit</groupId>
 <artifactId>junit</artifactId>
 <version>4.12</version>
 </dependency>
 <dependency>
 <groupId>org.slf4j</groupId>
 <artifactId>slf4j-log4j12</artifactId>
 <version>1.7.30</version>
 </dependency>
</dependencies>
（2）在项目的 src/main/resources 目录下，新建一个文件，命名为“log4j.properties”，在文件中填入。
log4j.rootLogger=INFO, stdout
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%n
log4j.appender.logfile=org.apache.log4j.FileAppender
log4j.appender.logfile.File=target/spring.log
log4j.appender.logfile.layout=org.apache.log4j.PatternLayout
log4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n
（3）编写 Mapper 类
public class WordCountMapper extends Mapper<LongWritable, Text, Text,
IntWritable>{
Text k = new Text();
IntWritable v = new IntWritable(1);
@Override
protected void map(LongWritable key, Text value, Context context)
throws IOException, InterruptedException {
// 1 获取一行
String line = value.toString();
// 2 切割
String[] words = line.split(" ");
// 3 输出
for (String word : words) {
k.set(word);
context.write(k, v);
}
}
}
（2）编写 Reducer 类
public class WordCountReducer extends Reducer<Text, IntWritable, Text,
IntWritable>{
int sum;
IntWritable v = new IntWritable();
@Override
protected void reduce(Text key, Iterable<IntWritable> values,Context
context) throws IOException, InterruptedException {
// 1 累加求和
sum = 0;
for (IntWritable count : values) {
sum += count.get();
}
// 2 输出
 v.set(sum);
context.write(key,v);
}
}
（3）编写 Driver 驱动类
public class WordCountDriver {
public static void main(String[] args) throws IOException,
ClassNotFoundException, InterruptedException {
// 1 获取配置信息以及获取 job 对象
Configuration conf = new Configuration();
Job job = Job.getInstance(conf);
// 2 关联本 Driver 程序的 jar
job.setJarByClass(WordCountDriver.class);
// 3 关联 Mapper 和 Reducer 的 jar
job.setMapperClass(WordCountMapper.class);
job.setReducerClass(WordCountReducer.class);
// 4 设置 Mapper 输出的 kv 类型
job.setMapOutputKeyClass(Text.class);
job.setMapOutputValueClass(IntWritable.class);
// 5 设置最终输出 kv 类型
job.setOutputKeyClass(Text.class);
job.setOutputValueClass(IntWritable.class);
// 6 设置输入和输出路径
FileInputFormat.setInputPaths(job, new Path(args[0]));
FileOutputFormat.setOutputPath(job, new Path(args[1]));
// 7 提交 job
boolean result = job.waitForCompletion(true);
System.exit(result ? 0 : 1);
}
}
集群上测试
（1）用 maven 打 jar 包，需要添加的打包插件依赖
<build>
 <plugins>
 <plugin>
 <artifactId>maven-compiler-plugin</artifactId>
 <version>3.6.1</version>
 <configuration>
 <source>1.8</source>
 <target>1.8</target>
 </configuration>
 </plugin>
 <plugin>
 <artifactId>maven-assembly-plugin</artifactId>
 <configuration>
 <descriptorRefs>
 <descriptorRef>jar-with-dependencies</descriptorRef>
 </descriptorRefs>
 </configuration>
 <executions>
 <execution>
 <id>make-assembly</id>
 <phase>package</phase>
 <goals>
 <goal>single</goal>
 </goals>
 </execution>
 </executions>
 </plugin>
 </plugins>
</build>
执行 WordCount 程序
 hadoop jar wc.jar com.silence.mapreduce.wordcount.WordCountDriver /user/silence/input /user/silence/output
 
第 2 章 Hadoop 序列化
2.1 序列化概述
1）为什么不用 Java 的序列化
   Java 的序列化是一个重量级序列化框架（Serializable），一个对象被序列化后，会附带
   很多额外的信息（各种校验信息，Header，继承体系等），不便于在网络中高效传输。所以，
   Hadoop 自己开发了一套序列化机制（Writable）。
2）Hadoop 序列化特点：
（1）紧凑 ：高效使用存储空间。
（2）快速：读写数据的额外开销小。
（3）互操作：支持多语言的交互
2.2 自定义 bean 对象实现序列化接口（Writable）
（1）必须实现 Writable 接口
（2）反序列化时，需要反射调用空参构造函数，所以必须有空参构造
（3）重写序列化方法
（4）重写反序列化方法
（5）注意反序列化的顺序和序列化的顺序完全一致
（6）要想把结果显示在文件中，需要重写 toString()，可用"\t"分开，方便后续用。
（7）如果需要将自定义的 bean 放在 key 中传输，则还需要实现 Comparable 接口，因为
     MapReduce 框中的 Shuffle 过程要求对 key 必须能排序。
序列化案例
    //1 继承 Writable 接口
    public class FlowBean implements Writable {
     private long upFlow; //上行流量
     private long downFlow; //下行流量
     private long sumFlow; //总流量
     //2 提供无参构造
     public FlowBean() {
     }
     //3 提供三个参数的 getter 和 setter 方法
     ......
     //4 实现序列化和反序列化方法,注意顺序一定要保持一致
     @Override
     public void write(DataOutput dataOutput) throws IOException {
     dataOutput.writeLong(upFlow);
     dataOutput.writeLong(downFlow);
     dataOutput.writeLong(sumFlow);
     }
     @Override
     public void readFields(DataInput dataInput) throws IOException {
     this.upFlow = dataInput.readLong();
     this.downFlow = dataInput.readLong();
     this.sumFlow = dataInput.readLong();
     }
     //5 重写 ToString
     @Override
     public String toString() {
     return upFlow + "\t" + downFlow + "\t" + sumFlow;
     }
    }

第 3 章 MapReduce 框架原理
1）MapTask 并行度决定机制
   数据块：Block 是 HDFS 物理上把数据分成一块一块。数据块是 HDFS 存储数据单位。
   数据切片：数据切片只是在逻辑上对输入进行分片，并不会在磁盘上将其切分成片进行存储。数据切片是 MapReduce 程序计算输入数据的单位，一个切片会对应启动一个 MapTask。
2）一个Job的Map阶段并行度由客户端在提交Job时的切片数决定   
3）每一个Split切片分配一个MapTask并行实例处理
4）默认情况下，切片大小=BlockSize
5）切片时不考虑数据集整体，而是逐个针对每一个文件单独切片

FileInputFormat切片源码解析
  （1）程序先找到你数据存储的目录。
  （2）开始遍历处理（规划切片）目录下的每一个文件
  （3）遍历第一个文件ss.txt
       a）获取文件大小fs.sizeOf(ss.txt)
       b）计算切片大小
       computeSplitSize(Math.max(minSize,Math.min(maxSize,blocksize)))=blocksize=128M
       c）默认情况下，切片大小=blocksize
       d）开始切，形成第1个切片：ss.txt—0:128M 第2个切片ss.txt—128:256M 第3个切片ss.txt—256M:300M
       （每次切片时，都要判断切完剩下的部分是否大于块的1.1倍，不大于1.1倍就划分一块切片）
       e）将切片信息写到一个切片规划文件中
       f）整个切片的核心过程在getSplit()方法中完成
       g）InputSplit只记录了切片的元数据信息，比如起始位置、长度以及所在的节点列表等。
  （4）提交切片规划文件到YARN上，YARN上的MrAppMaster就可以根据切片规划文件计算开启MapTask个数
FileInputFormat切片大小的参数配置
  （1）源码中计算切片大小的公式
       Math.max(minSize, Math.min(maxSize, blockSize));
       mapreduce.input.fileinputformat.split.minsize=1 默认值为1
       mapreduce.input.fileinputformat.split.maxsize= Long.MAXValue 默认值Long.MAXValue
       因此，默认情况下，切片大小=blocksize。
  （2）切片大小设置
       maxsize（切片最大值）：参数如果调得比blockSize小，则会让切片变小，而且就等于配置的这个参数的值。
       minsize（切片最小值）：参数调的比blockSize大，则可以让切片变得比blockSize还大。
  （3）获取切片信息API
       // 获取切片的文件名称
       String name = inputSplit.getPath().getName();
       // 根据文件类型获取切片信息
       FileSplit inputSplit = (FileSplit) context.getInputSplit();

TextInputFormat
   1）FileInputFormat 实现类
      FileInputFormat 常见的接口实现类包括：TextInputFormat、KeyValueTextInputFormat、NLineInputFormat、CombineTextInputFormat 和自定义 InputFormat 等
   2）TextInputFormat
      TextInputFormat 是默认的 FileInputFormat 实现类。按行读取每条记录。键是存储该行在整个文件中的起始字节偏移量， LongWritable 类型。值是这行的内容，不包括任何行终止符（换行符和回车符），Text 类型。
	  框架默认的 TextInputFormat 切片机制是对任务按文件规划切片，不管文件多小，都会是一个单独的切片，都会交给一个 MapTask，这样如果有大量小文件，就会产生大量的MapTask，处理效率极其低下
CombineTextInputFormat
   1）虚拟存储切片最大值设置
      CombineTextInputFormat.setMaxInputSplitSize(job, 4194304);// 4m
	  注意：虚拟存储切片最大值设置最好根据实际的小文件大小情况来设置具体的值。
   2）CombineTextInputFormat 案例实操
      （a）驱动类中添加代码如下：
          // 如果不设置 InputFormat，它默认用的是 TextInputFormat.class
          job.setInputFormatClass(CombineTextInputFormat.class);
          //虚拟存储切片最大值设置 4m
          CombineTextInputFormat.setMaxInputSplitSize(job, 4194304);
具体 Shuffle 过程详解
    （1）MapTask 收集我们的 map()方法输出的 kv 对，放到内存缓冲区中
    （2）从内存缓冲区不断溢出本地磁盘文件，可能会溢出多个文件
    （3）多个溢出文件会被合并成大的溢出文件
    （4）在溢出过程及合并的过程中，都要调用 Partitioner 进行分区和针对 key 进行排序
    （5）ReduceTask 根据自己的分区号，去各个 MapTask 机器上取相应的结果分区数据
    （6）ReduceTask 会抓取到同一个分区的来自不同 MapTask 的结果文件，ReduceTask 会将这些文件再进行合并（归并排序）
    （7）合并成大文件后，Shuffle 的过程也就结束了，后面进入 ReduceTask 的逻辑运算过程（从文件中取出一个一个的键值对 Group，调用用户自定义的 reduce()方法）
    注意：
    （1）Shuffle 中的缓冲区大小会影响到 MapReduce 程序的执行效率，原则上说，缓冲区越大，磁盘 io 的次数越少，执行速度就越快。
    （2）缓冲区的大小可以通过参数调整，参数：mapreduce.task.io.sort.mb 默认 100M。
	
Partition 分区
   默认Partitioner分区
   public class HashPartitioner<K, V> extends Partitioner<K, V> {
   public int getPartition(K key, V value, int numReduceTasks) {
   return (key.hashCode() & Integer.MAX_VALUE) % numReduceTasks;
   }
   }
   默认分区是根据key的hashCode对ReduceTasks个数取模得到的。用户没法控制哪个key存储到哪个分区。
   自定义Partitioner步骤
    （1）自定义类继承Partitioner，重写getPartition()方法
	（2）在Job驱动中，设置自定义Partitioner
	（3）自定义Partition后，要根据自定义Partitioner的逻辑设置相应数量的ReduceTask
  分区总结
   （1）如果ReduceTask的数量> getPartition的结果数，则会多产生几个空的输出文件part-r-000xx；
   （2）如果1<ReduceTask的数量<getPartition的结果数，则有一部分分区数据无处安放，会Exception；
   （3）如 果ReduceTask的数量=1，则不管MapTask端输出多少个分区文件，最终结果都交给这一个ReduceTask，最终也就只会产生一个结果文件 part-r-00000；
  案例实操
     增加一个分区类
      public class ProvincePartitioner extends Partitioner<Text, FlowBean> {
       @Override
       public int getPartition(Text text, FlowBean flowBean, int numPartitions)
      {
       //获取手机号前三位 prePhone
       String phone = text.toString();
       String prePhone = phone.substring(0, 3);
       //定义一个分区号变量 partition,根据 prePhone 设置分区号
       int partition;
       if("136".equals(prePhone)){
       partition = 0;
       }else if("137".equals(prePhone)){
       partition = 1;
       }else if("138".equals(prePhone)){
       partition = 2;
       }else if("139".equals(prePhone)){
       partition = 3;
       }else {
       partition = 4;
       }
       //最后返回分区号 partition
       return partition;
       }
      }
	  在驱动函数中增加自定义数据分区设置和 ReduceTask 设置
	    //8 指定自定义分区器
         job.setPartitionerClass(ProvincePartitioner.class);
         //9 同时指定相应数量的 ReduceTask
         job.setNumReduceTasks(5);
WritableComparable 排序
    MapTask和ReduceTask均会对数据按 照key进行排序。该操作属于Hadoop的默认行为。任何应用程序中的数据均会被排序，而不管逻辑上是否需要。
    默认排序是按照字典顺序排序，且实现该排序的方法是快速排序。
	排序分类
     （1）部分排序
          MapReduce根据输入记录的键对数据集排序。保证输出的每个文件内部有序。
     （2）全排序
          最终输出结果只有一个文件，且文件内部有序。实现方式是只设置一个ReduceTask。但该方法在处理大型文件时效率极低，因为一台机器处理所有文件，完全丧失了MapReduce所提供的并行架构。
     （3）辅助排序：（GroupingComparator分组）
        在Reduce端对key进行分组。应用于：在接收的key为bean对象时，想让一个或几个字段相同（全部字段比较不相同）的key进入到同一个reduce方法时，可以采用分组排序。
     （4）二次排序
        在自定义排序过程中，如果compareTo中的判断条件为两个即为二次排序。
  WritableComparable 排序案例实操 （全排序）
         public class FlowBean implements WritableComparable<FlowBean> {
        private long upFlow; //上行流量
        private long downFlow; //下行流量
        private long sumFlow; //总流量
        //提供无参构造
        public FlowBean() {
        }
        //生成三个属性的 getter 和 setter 方法
        ......
        //实现序列化和反序列化方法,注意顺序一定要一致
        @Override
        public void write(DataOutput out) throws IOException {
        out.writeLong(this.upFlow);
        out.writeLong(this.downFlow);
        out.writeLong(this.sumFlow);
        }
        @Override
        public void readFields(DataInput in) throws IOException {
        this.upFlow = in.readLong();
        this.downFlow = in.readLong();
        this.sumFlow = in.readLong();
        }
        //重写 ToString,最后要输出 FlowBean
        @Override
        public String toString() {
        return upFlow + "\t" + downFlow + "\t" + sumFlow;
        }
        @Override
        public int compareTo(FlowBean o) {
        //按照总流量比较,倒序排列
        if(this.sumFlow > o.sumFlow){
        return -1;
        }else if(this.sumFlow < o.sumFlow){
        return 1;
        }else {
        return 0;
        }
        }
        }
		
    WritableComparable 排序案例实操（区内排序）
	   （1）增加自定义分区类
	   （2）在驱动类中添加分区类
          // 设置自定义分区器
          job.setPartitionerClass(ProvincePartitioner2.class);
          // 设置对应的 ReduceTask 的个数
          job.setNumReduceTasks(5);
		  
Combiner 合并
   （1）Combiner是MR程序中Mapper和Reducer之外的一种组件。
   （2）Combiner组件的父类就是Reducer。
   （3）Combiner和Reducer的区别在于运行的位置Combiner是在每一个MapTask所在的节点运行;
   （4）Combiner的意义就是对每一个MapTask的输出进行局部汇总，以减小网络传输量。
   （5）Combiner能够应用的前提是不能影响最终的业务逻辑，而且，Combiner的输出kv应该跟Reducer的输入kv类型要对应起来。
  自定义 Combiner 实现步骤
    （a）自定义一个 Combiner 继承 Reducer，重写 Reduce 方法
	（b）在 Job 驱动类中设置：
        job.setCombinerClass(WordCountCombiner.class);
 OutputFormat 数据输出
    默认输出格式TextOutputFormat
	自定义OutputFormat
	    （1）编写 LogMapper 类
		（2）编写 LogReducer 类
		（3）自定义一个 LogOutputFormat 类
		public class LogOutputFormat extends FileOutputFormat<Text, NullWritable>
        {
         @Override
         public RecordWriter<Text, NullWritable>
        getRecordWriter(TaskAttemptContext job) throws IOException,
        InterruptedException {
         //创建一个自定义的 RecordWriter 返回
         LogRecordWriter logRecordWriter = new LogRecordWriter(job);
         return logRecordWriter;
         }
        }
		（4）编写 LogRecordWriter 类
		public class LogRecordWriter extends RecordWriter<Text, NullWritable> {
        private FSDataOutputStream silenceOut;
        private FSDataOutputStream otherOut;
        public LogRecordWriter(TaskAttemptContext job) {
        try {
        //获取文件系统对象
        FileSystem fs = FileSystem.get(job.getConfiguration());
        //用文件系统对象创建两个输出流对应不同的目录
        silenceOut = fs.create(new Path("d:/hadoop/silence.log"));
        otherOut = fs.create(new Path("d:/hadoop/other.log"));
        } catch (IOException e) {
        e.printStackTrace();
        }
        }
        @Override
        public void write(Text key, NullWritable value) throws IOException,InterruptedException {
        String log = key.toString();
        //根据一行的 log 数据是否包含 silence,判断两条输出流输出的内容
        if (log.contains("silence")) {
        silenceOut.writeBytes(log + "\n");
        } else {
        otherOut.writeBytes(log + "\n");
        }
        }
        @Override
        public void close(TaskAttemptContext context) throws IOException,InterruptedException {
        //关流
        IOUtils.closeStream(silenceOut);
        IOUtils.closeStream(otherOut);
        }
       }
	   （5）编写 LogDriver 类
	   //设置自定义的 outputformat
         job.setOutputFormatClass(LogOutputFormat.class);
         FileInputFormat.setInputPaths(job, new Path("D:\\input"));
         // 虽 然 我 们 自 定 义 了 outputformat ， 但 是 因 为 我 们 的 outputformat 继承自fileoutputformat
         //而 fileoutputformat 要输出一个_SUCCESS 文件，所以在这还得指定一个输出目录
ReduceTask 并行度决定机制
   1）设置 ReduceTask 并行度（个数）
      ReduceTask 的并行度同样影响整个 Job 的执行并发度和执行效率，但与 MapTask 的并发数由切片数决定不同，ReduceTask 数量的决定是可以直接手动设置：
      // 默认值是 1，手动设置为 4
      job.setNumReduceTasks(4);
	  
	注意事项
     （1）ReduceTask=0，表示没有Reduce阶段，输出文件个数和Map个数一致。
     （2）ReduceTask默认值就是1，所以输出文件个数为一个。
     （3）如果数据分布不均匀，就有可能在Reduce阶段产生数据倾斜
     （4）ReduceTask数量并不是任意设置，还要考虑业务逻辑需求，有些情况下，需要计算全局汇总结果，就只能有1个ReduceTask。
     （5）具体多少个ReduceTask，需要根据集群性能而定。
     （6）如果分区数不是1，但是ReduceTask为1，是否执行分区过程。答案是：不执行分区过程。因为在MapTask的源码中，执行分区的前提是先判断ReduceNum个数是否大于1。不大于1肯定不执行。

Join 应用
    Reduce Join
	   （1）创建商品和订单合并后的 TableBean 类
	      public class TableBean implements Writable {
             private String id; //订单 id
             private String pid; //产品 id
             private int amount; //产品数量 
             private String pname; //产品名称
             private String flag; //判断是 order 表还是 pd 表的标志字段
             public TableBean() {
             }
            //get/set方法
			......
             @Override
             public String toString() {
             return id + "\t" + pname + "\t" + amount;
             }
             @Override
             public void write(DataOutput out) throws IOException {
             out.writeUTF(id);
             out.writeUTF(pid);
             out.writeInt(amount);
             out.writeUTF(pname);
             out.writeUTF(flag);
             }
             @Override
             public void readFields(DataInput in) throws IOException { 
             this.id = in.readUTF();
             this.pid = in.readUTF();
             this.amount = in.readInt();
             this.pname = in.readUTF();
             this.flag = in.readUTF();
             }
            }
		（2）编写 TableMapper 类
              public class TableMapper extends Mapper<LongWritable,Text,Text,TableBean> 
              {
               private String filename;
               private Text outK = new Text();
               private TableBean outV = new TableBean();
               @Override
               protected void setup(Context context) throws IOException, 
              InterruptedException {
               //获取对应文件名称
               InputSplit split = context.getInputSplit();
               FileSplit fileSplit = (FileSplit) split;
               filename = fileSplit.getPath().getName();
               }
               @Override
               protected void map(LongWritable key, Text value, Context context) 
              throws IOException, InterruptedException {
               //获取一行
               String line = value.toString();
               //判断是哪个文件,然后针对文件进行不同的操作
               if(filename.contains("order")){ //订单表的处理
               String[] split = line.split("\t");
               //封装 outK
               outK.set(split[1]);
               //封装 outV
               outV.setId(split[0]);
               outV.setPid(split[1]);
               outV.setAmount(Integer.parseInt(split[2]));
               outV.setPname("");
               outV.setFlag("order");
               }else { //商品表的处理
               String[] split = line.split("\t");
               //封装 outK
               outK.set(split[0]);
               //封装 outV
               outV.setId("");
               outV.setPid(split[0]);
               outV.setAmount(0);
               outV.setPname(split[1]); 
               outV.setFlag("pd");
               }
               //写出 KV
               context.write(outK,outV);
               }
              }
		（3）编写 TableReducer 类
              public class TableReducer extends Reducer<Text,TableBean,TableBean, NullWritable> {
               @Override
               protected void reduce(Text key, Iterable<TableBean> values, Context context) throws IOException, InterruptedException {
               ArrayList<TableBean> orderBeans = new ArrayList<>();
               TableBean pdBean = new TableBean();
               for (TableBean value : values) {
               //判断数据来自哪个表
               if("order".equals(value.getFlag())){ //订单表
               //创建一个临时 TableBean 对象接收 value
               TableBean tmpOrderBean = new TableBean();
               try {
               BeanUtils.copyProperties(tmpOrderBean,value);
               } catch (IllegalAccessException e) {
               e.printStackTrace();
               } catch (InvocationTargetException e) {
               e.printStackTrace();
               }
               //将临时 TableBean 对象添加到集合 orderBeans
               orderBeans.add(tmpOrderBean);
               }else { //商品表
               try {
               BeanUtils.copyProperties(pdBean,value);
               } catch (IllegalAccessException e) {
               e.printStackTrace();
               } catch (InvocationTargetException e) {
               e.printStackTrace();
               }
               }
               }
               //遍历集合 orderBeans,替换掉每个 orderBean 的 pid 为 pname,然后写出
               for (TableBean orderBean : orderBeans) { 
               orderBean.setPname(pdBean.getPname());
               //写出修改后的 orderBean 对象
               context.write(orderBean,NullWritable.get());
               }
               }
              }
		（4）编写 TableDriver 类
             public class TableDriver {
              public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
              Job job = Job.getInstance(new Configuration());
              job.setJarByClass(TableDriver.class);
              job.setMapperClass(TableMapper.class);
              job.setReducerClass(TableReducer.class);
              job.setMapOutputKeyClass(Text.class);
              job.setMapOutputValueClass(TableBean.class);
              job.setOutputKeyClass(TableBean.class);
              job.setOutputValueClass(NullWritable.class);
              FileInputFormat.setInputPaths(job, new Path("D:\\input"));
              FileOutputFormat.setOutputPath(job, new Path("D:\\output"));
              boolean b = job.waitForCompletion(true);
              System.exit(b ? 0 : 1);
              }
             }
        总结
          缺点：这种方式中，合并的操作是在 Reduce 阶段完成，Reduce 端的处理压力太大，Map节点的运算负载则很低，资源利用率不高，且在 Reduce 阶段极易产生数据倾斜。
          解决方案：Map 端实现数据合并
    Map Join
	    采用 DistributedCache
          （1）在 Mapper 的 setup 阶段，将文件读取到缓存集合中。
          （2）在 Driver 驱动类中加载缓存。
          //缓存普通文件到 Task 运行节点。
          job.addCacheFile(new URI("file:///e:/cache/pd.txt"));
          //如果是集群运行,需要设置 HDFS 路径
          job.addCacheFile(new URI("hdfs://hadoop102:8020/cache/pd.txt"));
		  
        （1）先在 MapJoinDriver 驱动类中添加缓存文件
		    // 加载缓存数据
            job.addCacheFile(new URI("file:///D:/input/tablecache/pd.txt"));
            // Map 端 Join 的逻辑不需要 Reduce 阶段，设置 reduceTask 数量为 0
            job.setNumReduceTasks(0);
        （2）在 MapJoinMapper 类中的 setup 方法中读取缓存文件
               //任务开始前将 pd 数据缓存进 pdMap
               @Override
               protected void setup(Context context) throws IOException, 
              InterruptedException {
               //通过缓存文件得到小表数据 pd.txt
               URI[] cacheFiles = context.getCacheFiles();
               Path path = new Path(cacheFiles[0]);
               //获取文件系统对象,并开流
               FileSystem fs = FileSystem.get(context.getConfiguration());
               FSDataInputStream fis = fs.open(path);
               //通过包装流转换为 reader,方便按行读取
               BufferedReader reader = new BufferedReader(new 
              InputStreamReader(fis, "UTF-8"));
               //逐行读取，按行处理
               String line;
               while (StringUtils.isNotEmpty(line = reader.readLine())) {
               //切割一行 
              //01 小米
               String[] split = line.split("\t");
               pdMap.put(split[0], split[1]);
               }
               //关流
               IOUtils.closeStream(reader);
               }
 
  MapReduce 开发总结
    1）输入数据接口：InputFormat
    （1）默认使用的实现类是：TextInputFormat
    （2）TextInputFormat 的功能逻辑是：一次读一行文本，然后将该行的起始偏移量作为key，行内容作为 value 返回。
    （3）CombineTextInputFormat 可以把多个小文件合并成一个切片处理，提高处理效率。
    2）逻辑处理接口：Mapper 用户根据业务需求实现其中三个方法：map() setup() cleanup () 
    3）Partitioner 分区
    （1）有默认实现 HashPartitioner，逻辑是根据 key 的哈希值和 numReduces 来返回一个分区号；key.hashCode()&Integer.MAXVALUE % numReduces
    （2）如果业务上有特别的需求，可以自定义分区。
    4）Comparable 排序 
    （1）当我们用自定义的对象作为 key 来输出时，就必须要实现 WritableComparable 接口，重写其中的 compareTo()方法。
    （2）部分排序：对最终输出的每一个文件进行内部排序。
    （3）全排序：对所有数据进行排序，通常只有一个 Reduce。
    （4）二次排序：排序的条件有两个。
    5）Combiner 合并
    Combiner 合并可以提高程序执行效率，减少 IO 传输。但是使用时必须不能影响原有的业务处理结果。
    6）逻辑处理接口：Reducer用户根据业务需求实现其中三个方法：reduce() setup() cleanup () 
    7）输出数据接口：OutputFormat
    （1）默认实现类是 TextOutputFormat，功能逻辑是：将每一个 KV 对，向目标文本文件输出一行。
    （2）用户还可以自定义 OutputFormat。
	
Hadoop 数据压缩
    压缩方式选择时重点考虑：压缩/解压缩速度、压缩率（压缩后存储大小）、压缩后是否可以支持切片。
    Gzip 压缩
    优点：压缩率比较高；
    缺点：不支持 Split；压缩/解压速度一般；
    Bzip2 压缩
    优点：压缩率高；支持 Split；
    缺点：压缩/解压速度慢。
    Lzo 压缩
    优点：压缩/解压速度比较快；支持 Split；
    缺点：压缩率一般；想支持切片需要额外创建索引。 
    Snappy 压缩
    优点：压缩和解压缩速度快；
    缺点：不支持 Split；压缩率一般；
    压缩位置选择
    压缩可以在 MapReduce 作用的任意阶段启用。
	
   Map 输出端采用压缩
      // 开启 map 端输出压缩
      conf.setBoolean("mapreduce.map.output.compress", true);
      // 设置 map 端输出压缩方式
      conf.setClass("mapreduce.map.output.compress.codec", BZip2Codec.class,CompressionCodec.class);
	  Mapper 保持不变
      Reducer 保持不变
   Reduce 输出端采用压缩
      // 设置 reduce 端输出压缩开启
      FileOutputFormat.setCompressOutput(job, true);
      // 设置压缩的方式
       FileOutputFormat.setOutputCompressorClass(job, BZip2Codec.class); 
	  Mapper 和 Reducer 保持不变
	  
常见错误及解决方案
   1）导包容易出错。尤其 Text 和 CombineTextInputFormat。
   2）Mapper 中第一个输入的参数必须是 LongWritable 或者 NullWritable，不可以是 IntWritable. 
   报的错误是类型转换异常。
   3）java.lang.Exception: java.io.IOException: Illegal partition for 13926435656 (4)，说明 Partition
   和 ReduceTask 个数没对上，调整 ReduceTask 个数。
   4）如果分区数不是 1，但是 reducetask 为 1，是否执行分区过程。答案是：不执行分区过程。
   因为在 MapTask 的源码中，执行分区的前提是先判断 ReduceNum 个数是否大于 1。不大于
   1 肯定不执行。
   5）在 Windows 环境编译的 jar 包导入到 Linux 环境中运行，
   hadoop jar wc.jar com.silence.mapreduce.wordcount.WordCountDriver /user/silence/ 
   /user/silence/output
   报如下错误：
   Exception in thread "main" java.lang.UnsupportedClassVersionError: 
   com/silence/mapreduce/wordcount/WordCountDriver : Unsupported major.minor version 52.0 
   原因是 Windows 环境用的 jdk1.7，Linux 环境用的 jdk1.8。
   解决方案：统一 jdk 版本。
   6）缓存 pd.txt 小文件案例中，报找不到 pd.txt 文件
   原因：大部分为路径书写错误。还有就是要检查 pd.txt.txt 的问题。还有个别电脑写相对路径
   找不到 pd.txt，可以修改为绝对路径。
   7）报类型转换异常。
   通常都是在驱动函数中设置 Map 输出和最终输出时编写错误。
   Map 输出的 key 如果没有排序，也会报类型转换异常。
   8）集群中运行 wc.jar 时出现了无法获得输入文件。
   原因：WordCount 案例的输入文件不能放用 HDFS 集群的根目录。
   9）出现了如下相关异常
   Exception in thread "main" java.lang.UnsatisfiedLinkError: 
   org.apache.hadoop.io.nativeio.NativeIO$Windows.access0(Ljava/lang/String;I)Z
   at org.apache.hadoop.io.nativeio.NativeIO$Windows.access0(Native Method)
   at org.apache.hadoop.io.nativeio.NativeIO$Windows.access(NativeIO.java:609)
   at org.apache.hadoop.fs.FileUtil.canRead(FileUtil.java:977)
   java.io.IOException: Could not locate executable null\bin\winutils.exe in the Hadoop binaries.
   at org.apache.hadoop.util.Shell.getQualifiedBinPath(Shell.java:356)
   at org.apache.hadoop.util.Shell.getWinUtilsPath(Shell.java:371)
   at org.apache.hadoop.util.Shell.<clinit>(Shell.java:364)
   解决方案：拷贝 hadoop.dll 文件到 Windows 目录 C:\Windows\System32。个别同学电脑
   还需要修改 Hadoop 源码。
   方案二：创建如下包名，并将 NativeIO.java 拷贝到该包名下
   10）自定义 Outputformat 时，注意在 RecordWirter 中的 close 方法必须关闭流资源。否则输 
   出的文件内容中数据为空。
   @Override
   public void close(TaskAttemptContext context) throws IOException, 
   InterruptedException {
   if (atguigufos != null) {
   atguigufos.close();
   }
   if (otherfos != null) {
   otherfos.close();
   }
